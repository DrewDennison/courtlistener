# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-12-17 18:54
from __future__ import unicode_literals

import cl.lib.model_helpers
import cl.lib.storage
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('people_db', '0045_noop_fix_position_type_choices'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agreements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('date', models.TextField(blank=True, help_text='Dates of judicial agreements.')),
                ('parties_and_terms', models.TextField(blank=True, help_text='Parties and terms of agreement.')),
                ('redacted', models.BooleanField(default=False, help_text='Is the agreement redacted?')),
            ],
        ),
        migrations.CreateModel(
            name='Debt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('creditor_name', models.TextField(blank=True, help_text='Liability/Debt creditor')),
                ('description', models.TextField(blank=True, help_text='Description of the debt')),
                ('value_code', models.TextField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('Failed Extraction', 'Failed Extraction')], help_text='Form code for the value of the judicial debt.')),
                ('redacted', models.BooleanField(default=False, help_text='Is the debt redacted?')),
            ],
        ),
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('source', models.TextField(blank=True, help_text='Source of the judicial gift.')),
                ('description', models.TextField(blank=True, help_text='Description of the gift.')),
                ('value_code', models.TextField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('Failed Extraction', 'Failed Extraction')], help_text='Value of the judicial gift, as Value Code.')),
                ('redacted', models.BooleanField(default=False, help_text='Is the gift redacted?')),
            ],
        ),
        migrations.CreateModel(
            name='Investment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('description', models.TextField(blank=True, help_text='Name of investment')),
                ('redacted', models.BooleanField(default=False, help_text='Whether investment contains redactions.')),
                ('income_during_reporting_period_code', models.TextField(blank=True, choices=[('A', '1 - 1,000'), ('B', '1,001 - 2,500'), ('C', '2,501 - 5,000'), ('D', '5,001 - 15,000'), ('E', '15,001 - 50,000'), ('F', '50,001 - 100,000'), ('G', '100,001 - 1,000,000'), ('H1', '1,000,001 - 5,000,000'), ('H2', '5,000,001 +'), ('Failed Extraction', 'Failed Extraction')], help_text='Increase in investment value - as a form code')),
                ('income_during_reporting_period_type', models.TextField(blank=True, help_text='Type of investment ex. Rent, Dividend.  Typically standardized but not universally')),
                ('gross_value_code', models.TextField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('Failed Extraction', 'Failed Extraction')], help_text='Investment total value code at end of reporting period as code')),
                ('gross_value_method', models.TextField(blank=True, choices=[('Appraisal', 'Appraisal'), ('Cost (Real Estate Only)', 'Cost (Real Estate Only)'), ('Assessment', 'Assessment'), ('Cash Market', 'Cash Market'), ('Book Value', 'Book Value'), ('Other', 'Other'), ('Failed Extraction', 'Failed Extraction')], help_text='Investment valuation method code')),
                ('transaction_during_reporting_period', models.TextField(blank=True, help_text='Transaction of investment during reporting period ex. Buy Sold etc.')),
                ('transaction_date_raw', models.TextField(blank=True, help_text='Date of the transaction, if any')),
                ('transaction_value_code', models.TextField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('Failed Extraction', 'Failed Extraction')], help_text='Transaction value amount, as form code')),
                ('transaction_gain_code', models.TextField(blank=True, choices=[('A', '1 - 1,000'), ('B', '1,001 - 2,500'), ('C', '2,501 - 5,000'), ('D', '5,001 - 15,000'), ('E', '15,001 - 50,000'), ('F', '50,001 - 100,000'), ('G', '100,001 - 1,000,000'), ('H1', '1,000,001 - 5,000,000'), ('H2', '5,000,001 +'), ('Failed Extraction', 'Failed Extraction')], help_text='Gain from investment transaction if any')),
                ('transaction_partner', models.TextField(blank=True, help_text='Identity of the transaction partner')),
                ('has_inferred_values', models.BooleanField(default=False, help_text='The investment name was inferred during extraction')),
            ],
        ),
        migrations.CreateModel(
            name='NonInvestmentIncome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('date', models.TextField(blank=True, help_text='Date of non-investment income (ex. 2011).')),
                ('source_type', models.TextField(blank=True, help_text='Source and type of non-investment income for the judge (ex. Teaching a class at U. Miami).')),
                ('income_amount', models.TextField(blank=True, help_text='Amount earned by judge.')),
                ('redacted', models.BooleanField(default=False, help_text='Is non-investment income redacted?')),
            ],
        ),
        migrations.CreateModel(
            name='Positions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('position', models.TextField(blank=True, help_text='Position title.')),
                ('organization_name', models.TextField(blank=True, help_text='Name of orgnization or entity.')),
                ('redacted', models.BooleanField(default=False, help_text='Financial Disclosure filing option')),
            ],
        ),
        migrations.CreateModel(
            name='Reimbursement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('source', models.TextField(blank=True, help_text='Source of the reimbursement (ex. FSU Law School).')),
                ('dates', models.TextField(blank=True, help_text='Dates as a text string for the date of reimbursements.This is often conference dates (ex. June 2-6, 2011).')),
                ('location', models.TextField(blank=True, help_text='Location of the reimbursement (ex. Harvard Law School, Cambridge, MA).')),
                ('purpose', models.TextField(blank=True, help_text='Purpose of the reimbursement (ex. Baseball announcer).')),
                ('items_paid_or_provided', models.TextField(blank=True, help_text='Items reimbursed (ex. Room, Airfare).')),
                ('redacted', models.BooleanField(default=False, help_text='Does the reimbursement contain redactions?')),
            ],
        ),
        migrations.CreateModel(
            name='SpouseIncome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.')),
                ('source_type', models.TextField(blank=True, help_text='Source and Type of income of judicial spouse')),
                ('date', models.TextField(blank=True, help_text='Date of spousal income (ex. 2011).')),
                ('redacted', models.TextField(default=False, help_text='Is judicial spousal income redacted?')),
            ],
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='addendum_content_raw',
            field=models.TextField(blank=True, help_text='Raw content of addendum.'),
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='addendum_redacted',
            field=models.BooleanField(default=False, help_text='Is the adendum partially or completely redacted?'),
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, db_index=True, default=django.utils.timezone.now, help_text='The original creation date for the item'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='date_modified',
            field=models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified.'),
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='has_been_extracted',
            field=models.BooleanField(default=False, help_text='Have we successfully extracted the data from PDF?'),
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='is_amended',
            field=models.BooleanField(default=False, help_text='Is disclsoure amended?'),
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='pdf_hash',
            field=models.CharField(blank=True, db_index=True, help_text='PDF hash, used to idenitify duplicate PDFs', max_length=40),
        ),
        migrations.AddField(
            model_name='financialdisclosure',
            name='report_type',
            field=models.TextField(blank=True, choices=[(0, 'Nomination'), (1, 'Initial'), (2, 'Annual'), (3, 'Final')], help_text='Financial Disclosure report type', null=True),
        ),
        migrations.AlterField(
            model_name='financialdisclosure',
            name='filepath',
            field=models.FileField(db_index=True, help_text='The disclosure report itself', storage=cl.lib.storage.AWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path),
        ),
        migrations.AddField(
            model_name='spouseincome',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='spouse_income', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='reimbursement',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='reimbursement', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='positions',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='noninvestmentincome',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='non_investment_income', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='investment',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='investment', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='gift',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='gift', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='debt',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='debt', to='people_db.FinancialDisclosure'),
        ),
        migrations.AddField(
            model_name='agreements',
            name='financial_disclosure',
            field=models.ForeignKey(help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to='people_db.FinancialDisclosure'),
        ),
    ]
